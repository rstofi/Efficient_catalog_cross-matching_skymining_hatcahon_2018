import numpy as np
from matplotlib import pylab;
from matplotlib import pyplot as plt;

#=================================================
#MAIN
#=================================================

def get_data_colums(epoch):
    """Return the data columns of a given epoch

    :param epoch: given epoch in a numpy array, already readed from .csv
    """

    ID = epoch[:,0];
    RA = epoch[:,1];
    RA_err = epoch[:,2];
    Dec = epoch[:,3];
    Dec_err = epoch[:,4];
    Flux = epoch[:,5];
    Flux_err = epoch[:,6];

    return ID, RA, RA_err, Dec, Dec_err, Flux, Flux_err;

#=================================================
#PLOT FUNCTIONS
#=================================================

def plot_epoch_sky(epoch):
    """Plot the observed galaxy positions in the sky

    :param epoch: given epoch in a numpy array, already readed from .csv
    """

    ID, RA, RA_err, Dec, Dec_err, Flux, Flux_err = get_data_colums(epoch);

    fig=plt.figure(figsize=(12,12));
    plt.clf();
    plt.title('Sources on the sky', size=24);

    plt.errorbar(RA, Dec, xerr=RA_err, yerr=Dec_err, fmt='o');

    pylab.xlabel('RA [deg]', fontsize = 24);
    pylab.ylabel('Dec [deg]', fontsize = 24);
    plt.tick_params(labelsize=18);

    plt.tight_layout();

    plt.show();

def plot_two_epoch_sky(epoch1, epoch2):
    """Plot the observed galaxy positions in the sky

    :param epoch1: The firs given epoch in a numpy array, already readed from .csv
    :param epoch2: The second given epoch in a numpy array, already readed from .csv
    """

    ID_1, RA_1, RA_err_1, Dec_1, Dec_err_1, Flux_1, Flux_err_1 = get_data_colums(epoch1);
    ID_2, RA_2, RA_err_2, Dec_2, Dec_err_2, Flux_2, Flux_err_2 = get_data_colums(epoch2);

    fig=plt.figure(figsize=(12,12));
    plt.clf();
    plt.title('Sources on the sky', size=24);

    plt.errorbar(RA_1, Dec_1, xerr=RA_err_1, yerr=Dec_err_1, fmt='o', color='blue', alpha=0.5);
    plt.errorbar(RA_2, Dec_2, xerr=RA_err_2, yerr=Dec_err_2, fmt='o', color='red', alpha=0.5);

    pylab.xlabel('RA [deg]', fontsize = 24);
    pylab.ylabel('Dec [deg]', fontsize = 24);
    plt.tick_params(labelsize=18);

    plt.tight_layout();

    plt.show();

# Karl attempt
def find_index_of_nearest_xy(y_array, x_array, y_point, x_point):
    distance1 = ((y_array-y_point)**2 + (x_array-x_point)**2)**(.5)
    #idy,idx = np.where(distance1==distance1.min())
    index = np.where(distance1==distance1.min())
    distance = distance1[distance1==distance1.min()]
    return index[0][0], distance


def do_all(y_array, x_array):
    store = []
    for i in range(0,y_array.shape[0]):
        store.append(find_index_of_nearest_xy(
            x_array[:,2],x_array[:,1],y_array[i,2],y_array[i,1]))
    return store

#=================================================
#MAIN
#=================================================
if __name__ == "__main__":
    """Testing
    """
    epoch_0 = np.genfromtxt('../Data/epoch00.csv',  dtype=float, delimiter=',',  skip_header=1);
    epoch_1 = np.genfromtxt('../Data/epoch01.csv',  dtype=float, delimiter=',',  skip_header=1);

    print(epoch_0[1:4,:])
    results = do_all(epoch_1, epoch_0)
    results = np.concatenate((epoch_1, results), axis=1)
    #np.savetxt("C:/Users/karl_/Dropbox/Study, business/Data Science, John Hopkins, Coursera/Hackastron/epoch01temp.csv", results, delimiter=",")
    np.savetxt('../Data/epoch01temp.csv', results, delimiter=",") # 7th col = index of epoch00 neighbour, 8th col = distance

    #epoch_0 = np.genfromtxt('C:/Users/karl_/Dropbox/Study, business/Data Science, John Hopkins, Coursera/Hackastron/epoch00.csv',  dtype=float, delimiter=',',  skip_header=1)
    #epoch_1 = np.genfromtxt('C:/Users/karl_/Dropbox/Study, business/Data Science, John Hopkins, Coursera/Hackastron/epoch01.csv',  dtype=float, delimiter=',',  skip_header=1)
